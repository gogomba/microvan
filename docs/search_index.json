[["index.html", "Microvan About", " Microvan Hammond 2022-06-02 About The case describes a project by Grosse Pointe Associates (GPA) investigating the potential market for “microvans”. The objectives of this case are: 1. To give you experience segmenting customers in a market 2. To have you determine which segment(s) would be good to target based on analysis of the data. 3. To have you relate the segment(s) to demographic variables potentially useful for targeting # multivariate analysis and basic descriptive statistics library(psych) # data processing library(dplyr) library(tidyverse) library(data.table) library(DT) # plot library(ggplot2) library(corrplot) library(ggthemes) library(ggridges) # rMarkdown library(rmarkdown) library(kableExtra) # file path management library(here) # stat library(factoextra) "],["executive-summary.html", "Chapter1 Executive Summary", " Chapter1 Executive Summary The case describes a project by Grosse Pointe Associates (GPA) investigating the potential market for “microvans”. The objectives of this case are: 1. To give you experience segmenting customers in a market 2. To have you determine which segment(s) would be good to target based on analysis of the data. 3. To have you relate the segment(s) to demographic variables potentially useful for targeting. "],["explorative-data-analysis.html", "Chapter2 Explorative Data Analysis 2.1 Histogram 2.2 Correlation Analysis", " Chapter2 Explorative Data Analysis # data dataPath = file.path(dataDir, &quot;microvan.csv&quot;) microvan = read.csv(dataPath, sep=&quot;;&quot;) # Convert all integer variables into numeric ones for futher work microvan &lt;- as.data.table(lapply(microvan, as.numeric)) # data description description = psych::describe(microvan) %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(.,var=&quot;variable&quot;) %&gt;% dplyr::select(vars,everything())%&gt;% dplyr::rename(., &quot;variable id&quot; = &quot;vars&quot;) # columns that need to be formatted numCols = c(&quot;mean&quot;, &quot;sd&quot;, &quot;median&quot; , &quot;trimmed&quot;, &quot;mad&quot;, &quot;min&quot;, &quot;max&quot;, &quot;skew&quot;, &quot;kurtosis&quot;, &quot;se&quot;) DT::datatable( description, rownames = F, fillContainer = T, options = list( pageLength = 10, scrollX = TRUE, scrollY = TRUE ) ) %&gt;% DT::formatRound(columns = numCols , digits = 1) 2.1 Histogram microvan_df = microvan[,2:32] %&gt;% gather() microvan_hist = ggplot(microvan_df, aes(value)) + facet_wrap(~ key, scales = &quot;free&quot;,ncol = 6) + geom_histogram(alpha = 0.5, position = &quot;identity&quot;) + theme_economist_white() +theme(axis.title.x = element_blank()) microvan_hist_path = file.path(plotDir, &quot;microvan_hist.png&quot;) ggsave( filename =microvan_hist_path, plot = microvan_hist, width = 4000, height =4000, units = &quot;px&quot; ) ## `stat_bin()` using `bins = 30`. Pick better value with ## `binwidth`. Figure 2.1: Variable 2-32 2.2 Correlation Analysis 2.2.1 Pair-wise Scatter Plot 2.2.2 Correlation Matrix # plot name corrPlot = file.path(plotDir, &quot;corrPlot.png&quot;) cor_with_mvliking &lt;- cor(vars) png( filename = corrPlot, width = 1500, height = 1500 ) corrplot(cor_with_mvliking, method=&quot;number&quot;, type=&quot;upper&quot;, order = &quot;hclust&quot;, # reorder by the size of the correlation coefficients tl.cex = 1.5, # font size of the variable labels tl.col = &quot;black&quot;, # color of the variable labels tl.srt = 45, # rotation angle for the variable labels number.cex = 1.4 # font size of the coefficients ) invisible(dev.off()) 2.2.3 Normality test options(digits = 3) df_test= microvan[, 2:32] lshap = df_test%&gt;% summarise_all(.funs = funs(#statistic = shapiro.test(.)$statistic, p.value = shapiro.test(.)$p.value)) %&gt;% t() %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(., var = &quot;variable&quot;) %&gt;% dplyr::rename(., pvalue = &quot;V1&quot;) %&gt;% # data is normal if the p-value is above 0.05 dplyr::mutate(normality = case_when(pvalue &gt; 0.05 ~ &quot;normal&quot;, pvalue &lt;= 0.05 ~ &quot;not_normal&quot;)) normal_v = lshap%&gt;% filter(normality ==&quot;normal&quot;) %&gt;% pull(variable) shapiro.test(df_test$mvliking) ## ## Shapiro-Wilk normality test ## ## data: df_test$mvliking ## W = 0.9, p-value = 1e-13 "],["exploratory-factor-analysis.html", "Chapter3 Exploratory Factor Analysis 3.1 Eigenvalues 3.2 Extract Principal Factors 3.3 Factor Loadings 3.4 Factor Scores", " Chapter3 Exploratory Factor Analysis 3.1 Eigenvalues # correlation analysis without mvliking cor&lt;- cor(vars[,-1]) EV = eigen(cor)$values EV_df = EV %&gt;% # convert to df as.data.frame()%&gt;% # name column dplyr::rename(., &quot;Eigen Value&quot; =&quot;.&quot;) %&gt;% # add a column &quot;Factor&quot; dplyr::mutate(Factor = seq(1,length(EV))) %&gt;% # order columns dplyr::select(Factor, everything()) %&gt;% # add a column &quot;Variance&quot; dplyr::mutate(`Variance %` = EV/length(EV) *100) %&gt;% dplyr::mutate(`Cumulative Variance % ` = cumsum(EV/length(EV))* 100) %&gt;% dplyr::mutate(., across(where(is.numeric), round, 1)) rmarkdown::paged_table(EV_df ) 3.1.1 Scree Plot psych::scree(cor, pc = TRUE, factors = FALSE,) 3.1.2 Cumulative Percentages of Variance # Shares for the cumulative variance explained plot(cumsum(EV/length(EV)), type = &quot;o&quot;, # type of plot: &quot;o&quot; for points and lines &#39;overplotted&#39; col = &quot;darkblue&quot;, pch = 16, # plot symbol: 16 = filled circle cex = 1, # size of plot symbols xlab = &quot;Total number of factors&quot;, # a title for the x axis ylab = &quot;Cumulative variance explained&quot;, # a title for the y axis main= &quot;Cumulative Variance&quot;, lwd = 2) # line width abline(v = 5, lwd = 2, col = &quot;grey&quot;) # draw a vertical line at v = 3 3.1.3 Select Number of Factors using Kaiser Rule nFactor &lt;- length(which(EV &gt; 1)) print(paste0(nFactor, &quot; factors with Eigenvalue &gt; 1&quot; )) ## [1] &quot;5 factors with Eigenvalue &gt; 1&quot; 3.2 Extract Principal Factors EFA &lt;- psych::fa( r = cor, # number of factors nfactors = nFactor, # principal factor fm = &quot;pa&quot;, # maximizes the sum of the variance of the squared loadings rotate = &quot;varimax&quot; ) 3.3 Factor Loadings columnOrder &lt;- c(&quot;PA1&quot;, &quot;PA2&quot;, &quot;PA3&quot;, &quot;PA4&quot;,&quot;PA5&quot;,&quot;Communality&quot;,&quot;Uniqueness&quot;) EFA_loadings &lt;- data.frame(EFA$loadings[,] ) %&gt;% dplyr::mutate(Uniqueness = EFA$uniquenesses, Communality = EFA$communality) %&gt;% dplyr::mutate(., across(where(is.numeric), round, 2)) %&gt;% dplyr::select(columnOrder) %&gt;% arrange(., -Communality) EFA_loadings_DT = EFA_loadings %&gt;% tibble::rownames_to_column(., var=&quot;variable&quot;) # PA cols PACols = c(&quot;PA1&quot;, &quot;PA2&quot;, &quot;PA3&quot;, &quot;PA4&quot;,&quot;PA5&quot;) # color colfunc &lt;- colorRampPalette(c(&quot;darkblue&quot;, &quot;lightgrey&quot;)) # DT table DT::datatable(EFA_loadings_DT , options = list(pageLength = 30)) %&gt;% formatStyle(&quot;PA1&quot;, backgroundColor = styleEqual(sort(unique(EFA_loadings_DT $PA1), decreasing = TRUE), colfunc(length( unique(EFA_loadings_DT $PA1) )))) %&gt;% formatStyle(&quot;PA2&quot;, backgroundColor = styleEqual(sort(unique(EFA_loadings_DT $PA2), decreasing = TRUE), colfunc(length( unique(EFA_loadings_DT $PA2) )))) %&gt;% formatStyle(&quot;PA3&quot;, backgroundColor = styleEqual(sort(unique(EFA_loadings_DT $PA3), decreasing = TRUE), colfunc(length( unique(EFA_loadings_DT $PA3) )))) %&gt;% formatStyle(&quot;PA4&quot;, backgroundColor = styleEqual(sort(unique(EFA_loadings_DT $PA4), decreasing = TRUE), colfunc(length( unique(EFA_loadings_DT $PA4) )))) %&gt;% formatStyle(&quot;PA5&quot;, backgroundColor = styleEqual(sort(unique(EFA_loadings_DT $PA5), decreasing = TRUE), colfunc(length( unique(EFA_loadings_DT $PA5) )))) %&gt;% formatStyle(PACols, color = &quot;white&quot;) 3.4 Factor Scores # extract rotated factor scores EFA.scores = factor.scores(vars[,-1], unclass(EFA$loadings))$scores DT_cols = c(&quot;PA1&quot;,&quot;PA2&quot;,&quot;PA3&quot;,&quot;PA4&quot;,&quot;PA5&quot;) subjectValue =microvan$subjnumb EFA.scores %&gt;% as.data.frame() %&gt;% mutate(subjnumb = subjectValue )%&gt;% select(subjnumb, everything())%&gt;% head(10) %&gt;% DT::datatable(caption = &quot;Top 10 subjects&quot;,rownames = F) %&gt;% DT::formatRound(columns=DT_cols , digits=2) "],["regression-with-5-factors.html", "Chapter4 Regression with 5 Factors", " Chapter4 Regression with 5 Factors # data for regression EFA_with_score &lt;- cbind.data.frame(vars[,2], EFA.scores) %&gt;% dplyr::rename(., mvliking = &quot;vars[, 2]&quot; ) EFA_model &lt;- lm(mvliking ~ PA1 + PA2 +PA3+PA4 +PA5, data=EFA_with_score ) # summary output s =summary(EFA_model) #----------------------------------# # regression dataframe extraction #----------------------------------# # p-value col pvalueCol = &quot;p-value&quot; modelCol =&quot;model&quot; #numeric cols numCols = c(&quot;coefficient&quot;, &quot;std. Error&quot;, &quot;t value&quot;, &quot;p-value&quot;) # rename all cols st_newnames = c(modelCol, numCols) #----------------------------------# # extract coefficient table #----------------------------------# st =s$coefficients %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(., var= modelCol) # rename all cols colnames(st) = st_newnames # add significance stars st =st %&gt;% dplyr::mutate(significance = case_when( !!sym(pvalueCol) &lt; 0.001 ~ &quot; ***&quot;, !!sym(pvalueCol) &lt; 0.01 ~ &quot; **&quot;, !!sym(pvalueCol) &lt; 0.05 ~ &quot; *&quot;, TRUE ~ &quot;&quot; )) #----------------------------------# # show as DT table #----------------------------------# captionText = paste0(&quot;Adjusted R-squared: &quot;, round(s$adj.r.squared, 2)) st %&gt;% DT::datatable( caption = captionText , rownames = F, extensions = &quot;Buttons&quot;, options = list( paging = TRUE, scrollX = TRUE, searching = TRUE, ordering = TRUE, dom = &#39;Bfrtip&#39;, buttons = c(&#39;copy&#39;, &#39;csv&#39;, &#39;excel&#39;, &#39;pdf&#39;), pageLength = 5, lengthMenu = c(3, 5, 10) ) ) %&gt;% #DT::formatRound(numCols, digits=4) %&gt;% formatSignif(numCols, digits = 1) "],["regression-with-3-factors.html", "Chapter5 Regression with 3 Factors", " Chapter5 Regression with 3 Factors # data for regression EFA_model2 &lt;- lm(mvliking ~ PA1 + PA3 + PA5, data=EFA_with_score ) # summary output s =summary(EFA_model2) #----------------------------------# # extract coefficient table #----------------------------------# st =s$coefficients %&gt;% as.data.frame() %&gt;% tibble::rownames_to_column(., var= modelCol) # rename all cols colnames(st) = st_newnames # add significance stars st =st %&gt;% dplyr::mutate(significance = case_when( !!sym(pvalueCol) &lt; 0.001 ~ &quot; ***&quot;, !!sym(pvalueCol) &lt; 0.01 ~ &quot; **&quot;, !!sym(pvalueCol) &lt; 0.05 ~ &quot; *&quot;, TRUE ~ &quot;&quot; )) #----------------------------------# # show as DT table #----------------------------------# captionText = paste0(&quot;Adjusted R-squared: &quot;, round(s$adj.r.squared, 2)) st %&gt;% DT::datatable( caption = captionText , rownames = F, extensions = &quot;Buttons&quot;, options = list( paging = TRUE, scrollX = TRUE, searching = TRUE, ordering = TRUE, dom = &#39;Bfrtip&#39;, buttons = c(&#39;copy&#39;, &#39;csv&#39;, &#39;excel&#39;, &#39;pdf&#39;), pageLength = 5, lengthMenu = c(3, 5, 10) ) ) %&gt;% #DT::formatRound(numCols, digits=4) %&gt;% formatSignif(numCols, digits = 1) "],["clustering.html", "Chapter6 Clustering 6.1 Dendrogram 6.2 K-Means 6.3 Interpretation of the results", " Chapter6 Clustering 6.1 Dendrogram EFA_feature = EFA_with_score %&gt;% dplyr::select(PA1, PA3,PA5) # Run a cluster analysis on a distance matrix and using the Ward method c&lt;- hclust(dist(EFA_feature), method=&quot;ward.D2&quot;) # Dendrogram library(dendextend) plot(set(as.dendrogram(c), &quot;branches_k_color&quot;, # to highlight the cluster solution with a color k = 3), ylab = &quot;Distance&quot;, main = &quot;Dendrogram&quot;, cex = 0.2) 6.2 K-Means set.seed(42) EFA_kmeans &lt;- kmeans(EFA_feature , centers = 3) EFA_kmeans ## K-means clustering with 3 clusters of sizes 137, 144, 119 ## ## Cluster means: ## PA1 PA3 PA5 ## 1 0.638 -0.477 0.722 ## 2 -0.952 -0.453 -0.467 ## 3 0.417 1.096 -0.266 ## ## Clustering vector: ## [1] 2 1 3 2 1 1 3 2 3 2 2 3 2 1 3 3 1 3 2 2 2 2 1 1 3 3 3 3 3 3 2 ## [32] 1 1 3 3 3 1 1 1 1 1 3 2 2 3 3 3 3 3 2 3 3 2 1 2 3 2 3 3 3 1 2 ## [63] 2 2 1 2 2 1 1 1 1 2 2 1 1 2 2 1 2 3 3 2 2 2 3 2 2 1 3 2 3 3 2 ## [94] 3 1 1 1 2 2 2 2 3 2 2 2 1 3 3 1 3 3 3 2 1 2 2 1 2 2 2 3 2 3 1 ## [125] 2 2 2 2 1 2 1 1 3 2 2 1 1 1 1 1 1 1 2 2 1 2 3 3 2 2 1 2 3 1 1 ## [156] 2 3 2 1 3 3 1 1 2 3 2 1 1 2 3 1 2 2 3 3 1 1 3 3 1 3 2 1 1 3 1 ## [187] 1 2 2 3 1 1 2 2 3 2 2 1 3 1 1 2 3 2 1 1 2 1 2 2 3 1 2 1 1 2 3 ## [218] 1 2 1 1 2 1 2 1 2 3 2 1 2 2 1 1 3 3 1 3 1 2 1 2 3 3 2 3 2 3 1 ## [249] 2 2 3 2 1 1 3 2 3 2 2 1 1 3 3 2 1 1 2 2 3 2 1 3 1 2 1 1 1 1 1 ## [280] 3 3 2 1 1 3 2 2 1 3 2 3 2 2 1 1 2 1 3 3 3 1 2 1 1 2 1 1 3 3 3 ## [311] 2 2 2 3 2 1 2 3 1 1 2 1 2 3 2 3 2 2 2 3 1 2 3 3 3 3 2 2 1 2 1 ## [342] 1 1 1 3 2 2 3 1 2 3 2 1 2 3 3 3 3 3 1 1 1 2 1 3 3 2 1 1 2 3 1 ## [373] 1 3 2 3 2 2 1 3 1 1 3 1 1 3 3 2 1 2 1 3 1 3 3 2 2 1 1 2 ## ## Within cluster sum of squares by cluster: ## [1] 203 268 204 ## (between_SS / total_SS = 43.6 %) ## ## Available components: ## ## [1] &quot;cluster&quot; &quot;centers&quot; &quot;totss&quot; &quot;withinss&quot; ## [5] &quot;tot.withinss&quot; &quot;betweenss&quot; &quot;size&quot; &quot;iter&quot; ## [9] &quot;ifault&quot; # factor plot fviz_cluster(EFA_kmeans, data = EFA_feature) + theme_bw() 6.3 Interpretation of the results 6.3.1 Heatmap Table # Average for each cluster with one step vars_cluster_agg = aggregate(vars_cluster[, 2:31], by = list(cluster = EFA_kmeans$cluster), FUN = mean) # reshape df &lt;- vars_cluster_agg %&gt;% gather(variable, value, -cluster) # to transfrom from wide to long format library(gt) library(scales) # reshpae, long to wide (cluster ) df_wider = df%&gt;% dplyr::mutate(cluster = paste0(&quot;Cluster&quot;, cluster)) %&gt;% dplyr::mutate(., across(where(is.numeric), round, 2)) %&gt;% spread(., key=cluster, value =value) # cluster columns clusterCols = c(&quot;Cluster1&quot;, &quot;Cluster2&quot;, &quot;Cluster3&quot;) # color colfunc &lt;- colorRampPalette(c(&quot;darkblue&quot;, &quot;lightgrey&quot;)) # DT table DT::datatable(df_wider, options = list(pageLength = 15)) %&gt;% formatStyle(&quot;Cluster1&quot;, backgroundColor = styleEqual(sort(unique(df_wider$Cluster1), decreasing = TRUE), colfunc(length( unique(df_wider$Cluster1) )))) %&gt;% formatStyle(&quot;Cluster2&quot;, backgroundColor = styleEqual(sort(unique(df_wider$Cluster2), decreasing = TRUE), colfunc(length( unique(df_wider$Cluster2) )))) %&gt;% formatStyle(&quot;Cluster3&quot;, backgroundColor = styleEqual(sort(unique(df_wider$Cluster3), decreasing = TRUE), colfunc(length( unique(df_wider$Cluster3) )))) %&gt;% formatStyle(clusterCols, color = &quot;white&quot;) 6.3.2 Histogram df = vars_cluster %&gt;% gather(variable, value, -cluster) %&gt;% as.data.frame() # factorize cluster df$cluster &lt;- factor(df$cluster) # plot vars_cluster_hist = ggplot(df, aes(value, fill = cluster, color = cluster)) + geom_histogram(alpha = 0.3, position = &quot;identity&quot;) + facet_wrap( ~ variable, scales = &quot;free&quot;,ncol = 6) + theme_economist_white() vars_cluster_hist_path = file.path(plotDir, &quot;vars_cluster_hist.png&quot;) ggsave( filename = vars_cluster_hist_path, plot = vars_cluster_hist, width = 3000, height = 3000, units = &quot;px&quot; ) "],["demographic.html", "Chapter7 Demographic 7.1 Merge cluster data with decographic data 7.2 Histogram 7.3 Ridge plot", " Chapter7 Demographic 7.1 Merge cluster data with decographic data demo_cluster &lt;- cbind(microvan[,c(2,33:39)], cluster= EFA_kmeans$cluster) %&gt;% as.data.frame() %&gt;% select(cluster, everything()) df = demo_cluster %&gt;% gather(variable, value, -cluster) %&gt;% as.data.frame() DT::datatable(demo_cluster , options = list(pageLength = 10)) 7.2 Histogram # factorize cluster df$cluster &lt;- factor(df$cluster) df$variable &lt;- factor(df$variable, levels = c(&quot;mvliking&quot;,&quot;age&quot;, &quot;income&quot;, &quot;miles&quot;, &quot;educ&quot;, &quot;numkids&quot;, &quot;recycle&quot;, &quot;female&quot;)) # plot demo_cluster_hist = ggplot(df, aes(value, fill = cluster, color = cluster)) + geom_histogram(alpha = 0.3, position = &quot;identity&quot;) + facet_wrap( ~ variable, scales = &quot;free&quot;,ncol = 4) + theme_economist_white() demo_cluster_hist_path = file.path(plotDir, &quot;demo_cluster_hist.png&quot;) ggsave( filename = demo_cluster_hist_path, plot = demo_cluster_hist, width = 2400, height = 1800, units = &quot;px&quot; ) ## `stat_bin()` using `bins = 30`. Pick better value with ## `binwidth`. 7.3 Ridge plot # ridge plot demo_cluster_ridge = df %&gt;% ggplot( aes(y=cluster, x=value, fill=cluster)) + geom_density_ridges(alpha=0.3, stat=&quot;binline&quot;, bins=20) + facet_wrap( ~ variable, scales = &quot;free&quot;,ncol = 4) + xlab(&quot;&quot;) + ylab(&quot;&quot;) + theme_economist_white() demo_cluster_ridge_path = file.path(plotDir, &quot;demo_cluster_ridge.png&quot;) ggsave( filename = demo_cluster_ridge_path, plot = demo_cluster_ridge, width = 2400, height = 1800, units = &quot;px&quot; ) 7.3.1 Count of Subjects in Clusters demo_cluster_count = demo_cluster %&gt;% dplyr::select(cluster)%&gt;% dplyr::group_by(cluster)%&gt;% dplyr::mutate(n_subjects =n()) %&gt;% distinct() %&gt;% dplyr::arrange(cluster) # DT table DT::datatable(demo_cluster_count,rownames = F) 7.3.2 Stat 7.3.2.1 female library(ggstatsplot) DF = demo_cluster DF$cluster &lt;- factor(DF$cluster, levels = c(1,2,3)) DF$female &lt;- factor(DF$female, levels = c(0,1)) custom_colors = c(&quot;#B2182B&quot;, &quot;white&quot;, &quot;#4D4D4D&quot;) png_name = &quot;female&quot; female_path= file.path(plotDir,paste0(png_name,&quot;.png&quot;)) png( filename = female_path, width = 400, height = 600 ) # female ggbarstats( data = DF, #type = &quot;nonparametric&quot;, x = cluster, y = female, title = png_name # ggtheme = ggthemes::theme_tufte(base_size = 12) ) + scale_color_manual(values = c(custom_colors)) dev.off() ## quartz_off_screen ## 2 7.3.2.2 Education # educ ggbarstats( data = DF, #type = &quot;nonparametric&quot;, x = educ, y = cluster,title = &quot;educ&quot; # ggtheme = ggthemes::theme_tufte(base_size = 12) ) + scale_color_manual(values = c(custom_colors)) #### Recycle png_name = &quot;female&quot; recycle_path= file.path(plotDir,paste0(png_name,&quot;.png&quot;)) png( filename = recycle_path, width = 400, height = 600 ) # ggbarstats( data = DF, #type = &quot;nonparametric&quot;, y = cluster, x = recycle, title = png_name, # ggtheme = ggthemes::theme_tufte(base_size = 12) ) dev.off() ## quartz_off_screen ## 2 #ggbarstats( # data = DF, #type = &quot;nonparametric&quot;, #y = recycle, #x = cluster, #title = png_name, # ggtheme = ggthemes::theme_tufte(base_size = 12) #) 7.3.3 Kruskal–Wallis H test kwh_test_educ &lt;- DF %&gt;% rstatix::kruskal_test(educ ~ cluster) %&gt;% as.data.frame() kwh_test_numkids &lt;- DF %&gt;% rstatix::kruskal_test(numkids~ cluster) %&gt;% as.data.frame() kwh_test_mvliking &lt;- DF %&gt;% rstatix::kruskal_test(mvliking~ cluster) %&gt;% as.data.frame() kwh_test_age&lt;- DF %&gt;% rstatix::kruskal_test(age~ cluster) %&gt;% as.data.frame() kwh_test_income &lt;- DF %&gt;% rstatix::kruskal_test(income~ cluster) %&gt;% as.data.frame() kwh_test_miles &lt;- DF %&gt;% rstatix::kruskal_test(miles~ cluster) %&gt;% as.data.frame() kwh_test_female &lt;- DF %&gt;% rstatix::kruskal_test(female~ cluster) %&gt;% as.data.frame() kwh_test_recycle &lt;- DF %&gt;% rstatix::kruskal_test(recycle~ cluster) %&gt;% as.data.frame() kwh_test = dplyr::bind_rows( kwh_test_educ, kwh_test_mvliking, kwh_test_age, kwh_test_income, kwh_test_miles, kwh_test_female, kwh_test_recycle ) DT::datatable(kwh_test) 7.3.4 Factor vs Cluster "],["references.html", "References", " References Reducing Dimensionality Latent Dimensions of Customer Perceptions Hierarchical Clustering Preference Segmentation Preference Segmentation - Validation "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
